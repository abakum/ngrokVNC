// Code generated by 'go generate'; DO NOT EDIT.

package main

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modUser32 = windows.NewLazySystemDLL("User32.dll")

	procGetKeyboardLayout   = modUser32.NewProc("GetKeyboardLayout")
	procLoadKeyboardLayoutA = modUser32.NewProc("LoadKeyboardLayoutA")
	procPostMessageA        = modUser32.NewProc("PostMessageA")
)

func GetKeyboardLayout(idThread uint32) (gkl uint32) {
	r0, _, _ := syscall.Syscall(procGetKeyboardLayout.Addr(), 1, uintptr(idThread), 0, 0)
	gkl = uint32(r0)
	return
}

func LoadKeyboardLayout(pwszKLID []byte, Flags uint32) (gkl uint32) {
	var _p0 *byte
	if len(pwszKLID) > 0 {
		_p0 = &pwszKLID[0]
	}
	r0, _, _ := syscall.Syscall(procLoadKeyboardLayoutA.Addr(), 3, uintptr(unsafe.Pointer(_p0)), uintptr(len(pwszKLID)), uintptr(Flags))
	gkl = uint32(r0)
	return
}

func PostMessage(hWnd uint32, Msg uint32, wParam uint32, lParam uint32) (err error) {
	r1, _, e1 := syscall.Syscall6(procPostMessageA.Addr(), 4, uintptr(hWnd), uintptr(Msg), uintptr(wParam), uintptr(lParam), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}
